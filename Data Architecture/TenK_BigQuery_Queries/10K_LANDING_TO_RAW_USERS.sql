CREATE TABLE
  IF NOT EXISTS `sandbox.Raw.TenK_Users` (
    Users_id INT64,
    data_retrieval_time TIMESTAMP,
    archived_at TIMESTAMP,
    login_type STRING,
    has_login BOOL,
    updated_at TIMESTAMP,
    last_name STRING,
    mobile_phone STRING,
    user_settings INT64,
    archived BOOL,
    location STRING,
    office_phone INT64,
    invitation_pending BOOL,
    termination_date DATE,
    hire_date DATE,
    guid STRING,
    employee_number STRING,
    display_name STRING,
    type STRING,
    email STRING,
    last_login_time TIMESTAMP,
    deleted_at TIMESTAMP,
    thumbnail STRING,
    license_type STRING,
    billable BOOL,
    billability_target FLOAT64,
    first_name STRING,
    deleted BOOL,
    account_owner BOOL,
    location_id STRING,
    created_at TIMESTAMP,
    billrate FLOAT64,
    user_type_id INT64,
    role STRING,
    discipline STRING,
    director STRING (63),
    BU STRING (31),
    legal_name STRING (255),
    timezones STRING (63),
    tag STRING (20),
    tag_id INT64
  );

create
or replace view `sandbox.Raw.TenK_unnested_users` as (
  select
    U.Users_id,
    data_retrieval_time,
    archived_at,
    login_type,
    has_login,
    updated_at,
    last_name,
    mobile_phone,
    user_settings,
    archived,
    location,
    office_phone,
    invitation_pending,
    termination_date,
    hire_date,
    guid,
    employee_number,
    display_name,
    type,
    email,
    last_login_time,
    tags,
    deleted_at,
    thumbnail,
    license_type,
    billable,
    billability_target,
    first_name,
    deleted,
    account_owner,
    location_id,
    created_at,
    billrate,
    user_type_id,
    role,
    discipline,
    director,
    bu,
    legal_name,
    timezones,
    tag,
    tag_id
  from
    `sandbox.Landing.TenK_Users` U
    left join (
      select
        users_id,
        max(director) as director,
        max(legal_name) as legal_name,
        max(timezones) as timezones,
        max(BU) as BU,
        max(tech_stack) as tech_stack,
        max(tag) as tag,
        max(tag_id) as tag_id
      from
        (
          select
            users_id,
            case
              when custom_field_name = 'Director' then cfv.value
            end as director,
            case
              when custom_field_name = 'Legal Name' then cfv.value
            end as legal_name,
            case
              when custom_field_name = 'Timezones' then cfv.value
            end as timezones,
            case
              when custom_field_name = 'GL Business Unit' then cfv.value
            end as BU,
            case
              when custom_field_name = 'Engineering Tech Stack' then cfv.value
            end as tech_stack,
            case
              when t.value is not null then t.value
            end as tag,
            case
              when t.id is not null then t.id
            end as tag_id
          from
            `sandbox.Landing.TenK_Users` u,
            UNNEST (custom_field_values.data) as cfv
            left join UNNEST (tags.data) as t
        )
      group by
        users_id
    ) custom_fields on U.users_id = custom_fields.users_id
);

merge into `sandbox.Raw.TenK_Users` raw using `sandbox.Raw.TenK_unnested_users` land on raw.Users_id = land.Users_id when not matched then insert (
  Users_id,
  data_retrieval_time,
  archived_at,
  login_type,
  has_login,
  updated_at,
  last_name,
  mobile_phone,
  user_settings,
  archived,
  location,
  office_phone,
  invitation_pending,
  termination_date,
  hire_date,
  guid,
  employee_number,
  display_name,
  type,
  email,
  last_login_time,
  deleted_at,
  thumbnail,
  license_type,
  billable,
  billability_target,
  first_name,
  deleted,
  account_owner,
  location_id,
  created_at,
  billrate,
  user_type_id,
  role,
  discipline,
  director,
  bu,
  legal_name,
  timezones,
  tag,
  tag_id
)
values
  (
    Users_id,
    data_retrieval_time,
    archived_at,
    login_type,
    has_login,
    updated_at,
    last_name,
    mobile_phone,
    user_settings,
    archived,
    location,
    office_phone,
    invitation_pending,
    termination_date,
    hire_date,
    guid,
    employee_number,
    display_name,
    type,
    email,
    last_login_time,
    deleted_at,
    thumbnail,
    license_type,
    billable,
    billability_target,
    first_name,
    deleted,
    account_owner,
    location_id,
    created_at,
    billrate,
    user_type_id,
    role,
    discipline,
    director,
    bu,
    legal_name,
    timezones,
    tag,
    tag_id
  ) when matched then
update
set
  raw.Users_id = land.Users_id,
  raw.data_retrieval_time = land.data_retrieval_time,
  raw.archived_at = land.archived_at,
  raw.login_type = land.login_type,
  raw.has_login = land.has_login,
  raw.updated_at = land.updated_at,
  raw.last_name = land.last_name,
  raw.mobile_phone = land.mobile_phone,
  raw.user_settings = land.user_settings,
  raw.archived = land.archived,
  raw.location = land.location,
  raw.office_phone = land.office_phone,
  raw.invitation_pending = land.invitation_pending,
  raw.termination_date = land.termination_date,
  raw.hire_date = land.hire_date,
  raw.guid = land.guid,
  raw.employee_number = land.employee_number,
  raw.display_name = land.display_name,
  raw.type = land.type,
  raw.email = land.email,
  raw.last_login_time = land.last_login_time,
  raw.deleted_at = land.deleted_at,
  raw.thumbnail = land.thumbnail,
  raw.license_type = land.license_type,
  raw.billable = land.billable,
  raw.billability_target = land.billability_target,
  raw.first_name = land.first_name,
  raw.deleted = land.deleted,
  raw.account_owner = land.account_owner,
  raw.location_id = land.location_id,
  raw.created_at = land.created_at,
  raw.billrate = land.billrate,
  raw.user_type_id = land.user_type_id,
  raw.role = land.role,
  raw.discipline = land.discipline,
  raw.director = land.director,
  raw.bu = land.bu,
  raw.legal_name = land.legal_name,
  raw.timezones = land.timezones,
  raw.tag = land.tag,
  raw.tag_id = land.tag_id;